"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[112],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,u=p["".concat(l,".").concat(h)]||p[h]||m[h]||i;return n?o.createElement(u,r(r({ref:t},d),{},{components:n})):o.createElement(u,r({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9456:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2},r="Architecture",s={unversionedId:"for-developers/architecture",id:"for-developers/architecture",title:"Architecture",description:"Echo consists of several parts, such as: processor, util, core and annotations.",source:"@site/docs/for-developers/architecture.md",sourceDirName:"for-developers",slug:"/for-developers/architecture",permalink:"/wiki/for-developers/architecture",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/wiki/for-developers/getting-started"},next:{title:"Echo API",permalink:"/wiki/for-developers/echo-api/"}},l={},c=[{value:"Annotation Processor",id:"annotation-processor",level:2},{value:"Meta",id:"meta",level:3},{value:"Reference",id:"reference",level:3},{value:"Util",id:"util",level:2},{value:"Config Util",id:"config-util",level:3},{value:"File Util",id:"file-util",level:3},{value:"Version",id:"version",level:3},{value:"Annotations",id:"annotations",level:2},{value:"Echo",id:"echo",level:3},{value:"Insert",id:"insert",level:3},{value:"Root",id:"root",level:3},{value:"Shadow",id:"shadow",level:3},{value:"Core",id:"core",level:2},{value:"Transformation Manager",id:"transformation-manager",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"architecture"},"Architecture"),(0,a.kt)("p",null,"Echo consists of several parts, such as: ",(0,a.kt)("inlineCode",{parentName:"p"},"processor"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"util"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"annotations"),"."),(0,a.kt)("h2",{id:"annotation-processor"},"Annotation Processor"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"processor")," is an annotaton processor which processes ",(0,a.kt)("inlineCode",{parentName:"p"},"@Root")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"@Echo")," annotations, then, it writes two files into modules' jar: ",(0,a.kt)("inlineCode",{parentName:"p"},"moduleid.meta.echo")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"moduleid.ref.echo")," (where ",(0,a.kt)("inlineCode",{parentName:"p"},"moduleid")," is modules' id)."),(0,a.kt)("h3",{id:"meta"},"Meta"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".meta.echo")," contains ",(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.util.Version")," object in binary format, which is then used to check compatibility. "),(0,a.kt)("h3",{id:"reference"},"Reference"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".ref.echo")," is a ",(0,a.kt)("inlineCode",{parentName:"p"},"java.util.concurrent.ConcurrentHashMap<String, java.util.List<String>>"),', where key is path to some "original" class, and value is list of paths to "echo" classes that modify the original class.'),(0,a.kt)("h2",{id:"util"},"Util"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"util")," contains utility classes."),(0,a.kt)("h3",{id:"config-util"},"Config Util"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.util.ConfigUtil")," has code to read/write objects from/to objects. Used by ",(0,a.kt)("inlineCode",{parentName:"p"},"processor")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," to read and write ",(0,a.kt)("inlineCode",{parentName:"p"},".meta.echo")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".ref.echo"),"."),(0,a.kt)("h3",{id:"file-util"},"File Util"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.util.FileUtil")," has code to manipulate file paths and read bytes from file."),(0,a.kt)("h3",{id:"version"},"Version"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.util.Version")," is used to determine version of echo toolchain which module was compiled with, it is being written in ",(0,a.kt)("inlineCode",{parentName:"p"},"moduleid.meta.echo")," (where ",(0,a.kt)("inlineCode",{parentName:"p"},"moduleid")," is modules' id) in compile-time and then compared in run-time with ",(0,a.kt)("inlineCode",{parentName:"p"},"core"),"'s version."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Version of echo toolchain is the same for every echo sub-project. So for ",(0,a.kt)("inlineCode",{parentName:"p"},"processor-1.0")," there is ",(0,a.kt)("inlineCode",{parentName:"p"},"core-1.0"),".")),(0,a.kt)("h2",{id:"annotations"},"Annotations"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"annotations")," contain Echo's annotations, which are used by ",(0,a.kt)("inlineCode",{parentName:"p"},"processor"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," and modules."),(0,a.kt)("h3",{id:"echo"},"Echo"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.annotations.Echo")," annotation annotates an echo class, it takes target class' path as an argument."),(0,a.kt)("h3",{id:"insert"},"Insert"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.annotations.Insert")," annotation inserts code to the start of method. Takes name of target's method and it's descriptor."),(0,a.kt)("h3",{id:"root"},"Root"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.annotations.Root")," is an annotation that is used to define module root. Takes module id."),(0,a.kt)("h3",{id:"shadow"},"Shadow"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.annotations.Shadow")," is an annotation that marks a method or method in echo class as already-defined. Allows to trick Java into using an actual method with the same name and descriptor."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Until Echo v1 releases, more and more annotations will be added.")),(0,a.kt)("h2",{id:"core"},"Core"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"core")," has ",(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.core.Echo")," class as it's accessible API. First, when ",(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.core.Echo")," class is initialized, it initializes it's current version, global config and custom ",(0,a.kt)("inlineCode",{parentName:"p"},"ClassLoader"),". Then, ",(0,a.kt)("inlineCode",{parentName:"p"},"Amethyst")," (or your launcher) runs ",(0,a.kt)("inlineCode",{parentName:"p"},"load(String)")," method, which takes module id as an argument. ",(0,a.kt)("inlineCode",{parentName:"p"},"load")," method reads the ",(0,a.kt)("inlineCode",{parentName:"p"},".meta.echo")," file with that id and compares it's version with modules'. After that, it reads the ",(0,a.kt)("inlineCode",{parentName:"p"},".ref.echo")," file of that module and merges it into the global config, which maps ",(0,a.kt)("inlineCode",{parentName:"p"},"java.util.Map<String, java.util.List<String>")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"java.util.Map<woid.ClassNode, java.util.List<woid.ClassNode>>")," (see ",(0,a.kt)("a",{parentName:"p",href:"#annotation-processor"},"this")," for more info). After all loading is done, ",(0,a.kt)("inlineCode",{parentName:"p"},"Amethyst")," (or your launcher) runs ",(0,a.kt)("inlineCode",{parentName:"p"},"finish")," method, which takes the global config as argument and starts the process of transformation (see ",(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.core.transformer.TransformationManager#start(io.shardmc.echo.core.data.EchoData)")," for more info)."),(0,a.kt)("h3",{id:"transformation-manager"},"Transformation Manager"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.core.transformer.TransformationManager")," cycles through all entries in the global config and calls ",(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.core.transformer.Transformers"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"handle")," method, to destribute needed event across all registered transformers. ",(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.core.transformer.Transformer")," is an SPI, which can be used to register your own transformers (check ",(0,a.kt)("a",{parentName:"p",href:"echo-api/transformer-api"},"this")," for more info)."),(0,a.kt)("p",null),(0,a.kt)("p",null,"After all transformers have finished their work, ",(0,a.kt)("inlineCode",{parentName:"p"},"io.shardmc.echo.core.transformer.impl.DefineTransformer")," will be called to get the bytecode of modified original class (",(0,a.kt)("inlineCode",{parentName:"p"},"woid.ClassNode"),") and define it using the custom ",(0,a.kt)("inlineCode",{parentName:"p"},"ClassLoader"),". Defining the class before JVM has loaded it, is a great way to modify classes, unfortunately, it can only work before JVM has read that class, because redefenition is not allowed (unless you are using Java Agents to modify classes, but it's much more time consuming)."))}p.isMDXComponent=!0}}]);